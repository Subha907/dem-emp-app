type Employee @aws_iam @aws_api_key {
  id: ID!
  empName: String
  empLocation: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelEmployeeConnection @aws_api_key @aws_iam {
  items: [Employee]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelEmployeeFilterInput {
  id: ModelIDInput
  empName: ModelStringInput
  empLocation: ModelStringInput
  and: [ModelEmployeeFilterInput]
  or: [ModelEmployeeFilterInput]
  not: ModelEmployeeFilterInput
  _deleted: ModelBooleanInput
}

type Query {
  getEmployee(id: ID!): Employee @aws_api_key @aws_iam
  listEmployees(filter: ModelEmployeeFilterInput, limit: Int, nextToken: String): ModelEmployeeConnection @aws_api_key @aws_iam
  syncEmployees(filter: ModelEmployeeFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelEmployeeConnection @aws_api_key @aws_iam
}

input ModelEmployeeConditionInput {
  empName: ModelStringInput
  empLocation: ModelStringInput
  and: [ModelEmployeeConditionInput]
  or: [ModelEmployeeConditionInput]
  not: ModelEmployeeConditionInput
  _deleted: ModelBooleanInput
}

input CreateEmployeeInput {
  id: ID
  empName: String
  empLocation: String
  _version: Int
}

input UpdateEmployeeInput {
  id: ID!
  empName: String
  empLocation: String
  _version: Int
}

input DeleteEmployeeInput {
  id: ID!
  _version: Int
}

type Mutation {
  createEmployee(input: CreateEmployeeInput!, condition: ModelEmployeeConditionInput): Employee @aws_api_key @aws_iam
  updateEmployee(input: UpdateEmployeeInput!, condition: ModelEmployeeConditionInput): Employee @aws_api_key @aws_iam
  deleteEmployee(input: DeleteEmployeeInput!, condition: ModelEmployeeConditionInput): Employee @aws_api_key @aws_iam
}

input ModelSubscriptionEmployeeFilterInput {
  id: ModelSubscriptionIDInput
  empName: ModelSubscriptionStringInput
  empLocation: ModelSubscriptionStringInput
  and: [ModelSubscriptionEmployeeFilterInput]
  or: [ModelSubscriptionEmployeeFilterInput]
  _deleted: ModelBooleanInput
}

type Subscription {
  onCreateEmployee(filter: ModelSubscriptionEmployeeFilterInput): Employee @aws_subscribe(mutations: ["createEmployee"]) @aws_api_key @aws_iam
  onUpdateEmployee(filter: ModelSubscriptionEmployeeFilterInput): Employee @aws_subscribe(mutations: ["updateEmployee"]) @aws_api_key @aws_iam
  onDeleteEmployee(filter: ModelSubscriptionEmployeeFilterInput): Employee @aws_subscribe(mutations: ["deleteEmployee"]) @aws_api_key @aws_iam
}
